{"version":3,"sources":["logic/operate.js","component/App.js","logic/calculate.js","logic/isNumber.js","index.js"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","alert","div","Error","concat","App","state","total","next","handleClick","buttonName","_this","setState","obj","test","result","includes","parseFloat","calculate","react_default","a","createElement","className","React","Component","ReactDOM","render","App_App","document","getElementById"],"mappings":"iOAEe,SAASA,EAAQC,EAAWC,EAAWC,GACpD,IAAMC,EAAMC,IAAIJ,GAAa,KACvBK,EAAMD,IAAIH,IAA4B,SAAdC,GAAmC,MAAdA,EAAoB,IAAK,MAC5E,GAAkB,MAAdA,EACF,OAAOC,EAAIG,KAAKD,GAAKE,WAEvB,GAAkB,MAAdL,EACF,OAAOC,EAAIK,MAAMH,GAAKE,WAExB,GAAkB,MAAdL,EACF,OAAOC,EAAIM,MAAMJ,GAAKE,WAExB,GAAkB,SAAdL,EACF,MAAY,MAARG,GACFK,MAAM,qBACC,KAEAP,EAAIQ,IAAIN,GAAKE,WAGxB,MAAMK,MAAK,sBAAAC,OAAuBX,EAAvB,gBClBQY,6MACnBC,MAAQ,CACNC,MAAO,KACPC,KAAM,KACNf,UAAW,QAGbgB,YAAc,SAAAC,GACZC,EAAKC,SCEM,SAAmBC,EAAKH,GACrC,GAAmB,OAAfA,EACF,MAAO,CACLH,MAAO,KACPC,KAAM,KACNf,UAAW,MAIf,GCtBO,SAASqB,KDsBHJ,GACX,MAAmB,MAAfA,GAAmC,MAAbG,EAAIL,KACrB,GAGLK,EAAIpB,UACFoB,EAAIL,KACC,CAAEA,KAAMK,EAAIL,KAAOE,GAErB,CAAEF,KAAME,GAGbG,EAAIL,KAEC,CACLA,KAFwB,MAAbK,EAAIL,KAAeE,EAAaG,EAAIL,KAAOE,EAGtDH,MAAO,MAGJ,CACLC,KAAME,EACNH,MAAO,MAIX,GAAmB,MAAfG,EAAoB,CACtB,GAAIG,EAAIpB,WAAaoB,EAAIL,KAAM,CAC7B,IAAMO,EAASzB,EAAQuB,EAAIN,MAAOM,EAAIL,KAAMK,EAAIpB,WAChD,MAAO,CACLc,MAAOZ,IAAIoB,GACRb,IAAIP,IAAI,QACRG,WACHU,KAAM,KACNf,UAAW,MAGf,OAAIoB,EAAIL,KACC,CACLA,KAAMb,IAAIkB,EAAIL,MACXN,IAAIP,IAAI,QACRG,YAGA,GAGT,MAAmB,MAAfY,EACEG,EAAIL,KAEFK,EAAIL,KAAKQ,SAAS,KACb,GAEF,CAAER,KAAMK,EAAIL,KAAO,KAErB,CAAEA,KAAM,MAGE,MAAfE,EACEG,EAAIL,MAAQK,EAAIpB,UACX,CACLc,MAAOjB,EAAQuB,EAAIN,MAAOM,EAAIL,KAAMK,EAAIpB,WACxCe,KAAM,KACNf,UAAW,MAIN,GAIQ,QAAfiB,EACEG,EAAIL,KACC,CAAEA,OAAQ,EAAIS,WAAWJ,EAAIL,OAAOV,YAEzCe,EAAIN,MACC,CAAEA,QAAS,EAAIU,WAAWJ,EAAIN,QAAQT,YAExC,GAYLe,EAAIpB,UACC,CACLc,MAAOjB,EAAQuB,EAAIN,MAAOM,EAAIL,KAAMK,EAAIpB,WACxCe,KAAM,KACNf,UAAWiB,GAOVG,EAAIL,KAKF,CACLD,MAAOM,EAAIL,KACXA,KAAM,KACNf,UAAWiB,GAPJ,CAAEjB,UAAWiB,GDhHNQ,CAAUP,EAAKL,MAAOI,6EAIpC,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,yBAdyBE,IAAMC,uBGEvCC,IAASC,OAAOP,EAAAC,EAAAC,cAACM,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.ba53979f.chunk.js","sourcesContent":["import Big from \"big.js\";\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne || \"0\");\n  const two = Big(numberTwo || (operation === \"รท\" || operation === 'x' ? \"1\": \"0\")); //If dividing or multiplying, then 1 maintains current value in cases of null\n  if (operation === \"+\") {\n    return one.plus(two).toString();\n  }\n  if (operation === \"-\") {\n    return one.minus(two).toString();\n  }\n  if (operation === \"x\") {\n    return one.times(two).toString();\n  }\n  if (operation === \"รท\") {\n    if (two === \"0\") {\n      alert(\"Divide by 0 error\");\n      return \"0\";\n    } else {\n      return one.div(two).toString();\n    }\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import React from \"react\";\nimport calculate from \"../logic/calculate\";\nimport \"./App.css\";\n\nexport default class App extends React.Component {\n  state = {\n    total: null,\n    next: null,\n    operation: null,\n  };\n\n  handleClick = buttonName => {\n    this.setState(calculate(this.state, buttonName));\n  };\n\n  render() {\n    return (\n      <div className=\"component-app\">\n        <p>pepe</p>\n      </div>\n    );\n  }\n}\n","import Big from \"big.js\";\n\nimport operate from \"./operate\";\nimport isNumber from \"./isNumber\";\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:String      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"AC\") {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === \"0\" && obj.next === \"0\") {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      const next = obj.next === \"0\" ? buttonName : obj.next + buttonName;\n      return {\n        next,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === \"%\") {\n    if (obj.operation && obj.next) {\n      const result = operate(obj.total, obj.next, obj.operation);\n      return {\n        total: Big(result)\n          .div(Big(\"100\"))\n          .toString(),\n        next: null,\n        operation: null,\n      };\n    }\n    if (obj.next) {\n      return {\n        next: Big(obj.next)\n          .div(Big(\"100\"))\n          .toString(),\n      };\n    }\n    return {};\n  }\n\n  if (buttonName === \".\") {\n    if (obj.next) {\n      // ignore a . if the next number already has one\n      if (obj.next.includes(\".\")) {\n        return {};\n      }\n      return { next: obj.next + \".\" };\n    }\n    return { next: \"0.\" };\n  }\n\n  if (buttonName === \"=\") {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    } else {\n      // '=' with no operation, nothing to do\n      return {};\n    }\n  }\n\n  if (buttonName === \"+/-\") {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","export default function isNumber(item) {\n  return /[0-9]+/.test(item);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./component/App\";\nimport \"./index.css\";\nimport \"github-fork-ribbon-css/gh-fork-ribbon.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}